// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-journey/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-journey/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-journey/internal/validators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-journey/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-journey/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &JourneyResource{}
var _ resource.ResourceWithImportState = &JourneyResource{}

func NewJourneyResource() resource.Resource {
	return &JourneyResource{}
}

// JourneyResource defines the resource implementation.
type JourneyResource struct {
	client *sdk.SDK
}

// JourneyResourceModel describes the resource data model.
type JourneyResourceModel struct {
	BrandID       types.String                                    `tfsdk:"brand_id"`
	ContextSchema []tfTypes.JourneyCreationRequestV2ContextSchema `tfsdk:"context_schema"`
	Design        *tfTypes.JourneyCreationRequestV2Design         `tfsdk:"design"`
	JourneyID     types.String                                    `tfsdk:"journey_id"`
	JourneyType   types.String                                    `tfsdk:"journey_type"`
	Logics        types.String                                    `tfsdk:"logics"`
	Manifest      []types.String                                  `tfsdk:"manifest"`
	Name          types.String                                    `tfsdk:"name"`
	Rules         []tfTypes.JourneyCreationRequestV2Rules         `tfsdk:"rules"`
	Settings      *tfTypes.JourneyCreationRequestV2Settings       `tfsdk:"settings"`
	Steps         types.String                                    `tfsdk:"steps"`
}

func (r *JourneyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_journey"
}

func (r *JourneyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Journey Resource",
		Attributes: map[string]schema.Attribute{
			"brand_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"context_schema": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"is_required": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"param_key": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"should_load_entity": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"design": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"design_tokens": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
					},
					"logo_url": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"theme": schema.MapAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
				},
			},
			"journey_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"journey_type": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Journey Template`,
			},
			"logics": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Manifest/Blueprint ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"rules": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"source": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"source_type": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null; must be one of ["journey", "step", "block"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"journey",
									"step",
									"block",
								),
							},
						},
						"target": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null; must be one of ["inject", "injectWithKey"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"inject",
									"injectWithKey",
								),
							},
						},
					},
				},
			},
			"settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"access_mode": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `must be one of ["PUBLIC", "PRIVATE"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"PUBLIC",
								"PRIVATE",
							),
						},
					},
					"address_suggestions_file_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"address_suggestions_file_url": schema.StringAttribute{
						Computed:           true,
						Optional:           true,
						DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
						Description:        `@deprecated Use addressSuggestionsFileId instead`,
					},
					"description": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"design_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"embed_options": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"button": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"align": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be one of ["left", "center", "right"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"left",
												"center",
												"right",
											),
										},
									},
									"text": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
							},
							"lang": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be one of ["de", "en", "fr"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"de",
										"en",
										"fr",
									),
								},
							},
							"mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be one of ["full-screen", "inline"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"full-screen",
										"inline",
									),
								},
							},
							"scroll_to_top": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"top_bar": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"width": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"entity_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"entity_tags": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"file_purposes": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"mappings_automation_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"runtime_entities": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"safe_mode_automation": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"targeted_customer": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"template_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"third_party_cookies": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `If false, third-party cookies are disabled to comply with GDPR regulations without asking for consent.`,
					},
					"use_new_design": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
				},
			},
			"steps": schema.StringAttribute{
				Required:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
		},
	}
}

func (r *JourneyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *JourneyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *JourneyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedJourneyCreationRequestV2(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.JourneysV2.CreateJourneyV2(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.JourneyCreationRequestV2 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedJourneyCreationRequestV2(ctx, res.JourneyCreationRequestV2)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetJourneyV2Request(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.JourneysV2.GetJourneyV2(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.JourneyCreationRequestV2 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedJourneyCreationRequestV2(ctx, res.JourneyCreationRequestV2)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *JourneyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedJourneyCreationRequestV2(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.JourneysV2.UpdateJourneyV2(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.JourneyCreationRequestV2 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedJourneyCreationRequestV2(ctx, res.JourneyCreationRequestV2)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *JourneyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *JourneyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsRemoveJourneyV2Request(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.JourneysV2.RemoveJourneyV2(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *JourneyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("journey_id"), req.ID)...)
}
