// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-journey/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-journey/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *JourneyDataSourceModel) RefreshFromSharedJourneyCreationRequestV2(resp *shared.JourneyCreationRequestV2) {
	if resp != nil {
		r.BrandID = types.StringPointerValue(resp.BrandID)
		r.ContextSchema = []tfTypes.JourneyCreationRequestV2ContextSchema{}
		if len(r.ContextSchema) > len(resp.ContextSchema) {
			r.ContextSchema = r.ContextSchema[:len(resp.ContextSchema)]
		}
		for contextSchemaCount, contextSchemaItem := range resp.ContextSchema {
			var contextSchema1 tfTypes.JourneyCreationRequestV2ContextSchema
			contextSchema1.IsRequired = types.BoolPointerValue(contextSchemaItem.IsRequired)
			contextSchema1.ParamKey = types.StringValue(contextSchemaItem.ParamKey)
			contextSchema1.Type = types.StringValue(contextSchemaItem.Type)
			if contextSchemaCount+1 > len(r.ContextSchema) {
				r.ContextSchema = append(r.ContextSchema, contextSchema1)
			} else {
				r.ContextSchema[contextSchemaCount].IsRequired = contextSchema1.IsRequired
				r.ContextSchema[contextSchemaCount].ParamKey = contextSchema1.ParamKey
				r.ContextSchema[contextSchemaCount].Type = contextSchema1.Type
			}
		}
		if resp.Design == nil {
			r.Design = nil
		} else {
			r.Design = &tfTypes.JourneyCreationRequestV2Design{}
			r.Design.LogoURL = types.StringPointerValue(resp.Design.LogoURL)
			if len(resp.Design.Theme) > 0 {
				r.Design.Theme = make(map[string]types.String)
				for key, value := range resp.Design.Theme {
					result, _ := json.Marshal(value)
					r.Design.Theme[key] = types.StringValue(string(result))
				}
			}
		}
		r.JourneyID = types.StringPointerValue(resp.JourneyID)
		r.Logics = []tfTypes.JourneyCreationRequestV2Logics{}
		if len(r.Logics) > len(resp.Logics) {
			r.Logics = r.Logics[:len(resp.Logics)]
		}
		for logicsCount, logicsItem := range resp.Logics {
			var logics1 tfTypes.JourneyCreationRequestV2Logics
			logics1.Actions = []types.String{}
			for _, v := range logicsItem.Actions {
				logics1.Actions = append(logics1.Actions, types.StringValue(v))
			}
			logics1.AutoGeneratedID = types.StringPointerValue(logicsItem.AutoGeneratedID)
			logics1.Conditions = []types.String{}
			for _, v := range logicsItem.Conditions {
				logics1.Conditions = append(logics1.Conditions, types.StringValue(v))
			}
			if logicsCount+1 > len(r.Logics) {
				r.Logics = append(r.Logics, logics1)
			} else {
				r.Logics[logicsCount].Actions = logics1.Actions
				r.Logics[logicsCount].AutoGeneratedID = logics1.AutoGeneratedID
				r.Logics[logicsCount].Conditions = logics1.Conditions
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Rules = []tfTypes.JourneyCreationRequestV2Rules{}
		if len(r.Rules) > len(resp.Rules) {
			r.Rules = r.Rules[:len(resp.Rules)]
		}
		for rulesCount, rulesItem := range resp.Rules {
			var rules1 tfTypes.JourneyCreationRequestV2Rules
			rules1.Source = types.StringValue(rulesItem.Source)
			rules1.SourceType = types.StringValue(string(rulesItem.SourceType))
			rules1.Target = types.StringValue(rulesItem.Target)
			rules1.Type = types.StringValue(string(rulesItem.Type))
			if rulesCount+1 > len(r.Rules) {
				r.Rules = append(r.Rules, rules1)
			} else {
				r.Rules[rulesCount].Source = rules1.Source
				r.Rules[rulesCount].SourceType = rules1.SourceType
				r.Rules[rulesCount].Target = rules1.Target
				r.Rules[rulesCount].Type = rules1.Type
			}
		}
		if resp.Settings == nil {
			r.Settings = nil
		} else {
			r.Settings = &tfTypes.JourneyCreationRequestV2Settings{}
			r.Settings.AddressSuggestionsFileURL = types.StringPointerValue(resp.Settings.AddressSuggestionsFileURL)
			r.Settings.Description = types.StringPointerValue(resp.Settings.Description)
			r.Settings.DesignID = types.StringPointerValue(resp.Settings.DesignID)
			if resp.Settings.EmbedOptions == nil {
				r.Settings.EmbedOptions = nil
			} else {
				r.Settings.EmbedOptions = &tfTypes.JourneyCreationRequestV2EmbedOptions{}
				if resp.Settings.EmbedOptions.Button == nil {
					r.Settings.EmbedOptions.Button = nil
				} else {
					r.Settings.EmbedOptions.Button = &tfTypes.JourneyCreationRequestV2Button{}
					if resp.Settings.EmbedOptions.Button.Align != nil {
						r.Settings.EmbedOptions.Button.Align = types.StringValue(string(*resp.Settings.EmbedOptions.Button.Align))
					} else {
						r.Settings.EmbedOptions.Button.Align = types.StringNull()
					}
					r.Settings.EmbedOptions.Button.Text = types.StringPointerValue(resp.Settings.EmbedOptions.Button.Text)
				}
				if resp.Settings.EmbedOptions.Lang != nil {
					r.Settings.EmbedOptions.Lang = types.StringValue(string(*resp.Settings.EmbedOptions.Lang))
				} else {
					r.Settings.EmbedOptions.Lang = types.StringNull()
				}
				if resp.Settings.EmbedOptions.Mode != nil {
					r.Settings.EmbedOptions.Mode = types.StringValue(string(*resp.Settings.EmbedOptions.Mode))
				} else {
					r.Settings.EmbedOptions.Mode = types.StringNull()
				}
				r.Settings.EmbedOptions.ScrollToTop = types.BoolPointerValue(resp.Settings.EmbedOptions.ScrollToTop)
				r.Settings.EmbedOptions.TopBar = types.BoolPointerValue(resp.Settings.EmbedOptions.TopBar)
				r.Settings.EmbedOptions.Width = types.StringPointerValue(resp.Settings.EmbedOptions.Width)
			}
			r.Settings.EntityID = types.StringPointerValue(resp.Settings.EntityID)
			r.Settings.EntityTags = []types.String{}
			for _, v := range resp.Settings.EntityTags {
				r.Settings.EntityTags = append(r.Settings.EntityTags, types.StringValue(v))
			}
			r.Settings.FilePurposes = []types.String{}
			for _, v := range resp.Settings.FilePurposes {
				r.Settings.FilePurposes = append(r.Settings.FilePurposes, types.StringValue(v))
			}
			r.Settings.MappingsAutomationID = types.StringPointerValue(resp.Settings.MappingsAutomationID)
			r.Settings.RuntimeEntities = []types.String{}
			for _, v := range resp.Settings.RuntimeEntities {
				r.Settings.RuntimeEntities = append(r.Settings.RuntimeEntities, types.StringValue(string(v)))
			}
			r.Settings.SafeModeAutomation = types.BoolPointerValue(resp.Settings.SafeModeAutomation)
			r.Settings.TargetedCustomer = types.StringPointerValue(resp.Settings.TargetedCustomer)
			r.Settings.TemplateID = types.StringPointerValue(resp.Settings.TemplateID)
		}
		stepsResult, _ := json.Marshal(resp.Steps)
		r.Steps = types.StringValue(string(stepsResult))
	}
}
